---
title: "R Session 1"
author: "Morris"
date: "2/28/2022"
output:
  word_document: default
  html_document:
    df_print: paged
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Introduction to R Programming

R is a programming language and software environment for statistical analysis, graphics representation and reporting.

The core of R is an interpreted computer language which allows branching and looping as well as modular programming using functions. 

R allows integration with the procedures written in the C, C++, .Net, Python or FORTRAN languages for efficiency.

# Features of R
As stated earlier, R is a programming language and software environment for statistical analysis, graphics representation and reporting. The following are the important features of R:
 R is a well-developed, simple and effective programming language which includes conditionals, loops, user defined recursive functions and input and output facilities.

 R has an effective data handling and storage facility,

 R provides a suite of operators for calculations on arrays, lists, vectors and matrices.

 R provides a large, coherent and integrated collection of tools for data analysis.

 R provides graphical facilities for data analysis and display either directly at the computer or printing at the papers.

# R DATA TYPES
Generally, while doing programming in any programming language, you need to use various variables to store various information. 

Variables are nothing but reserved memory locations 
to store values. 

This means that, when you create a variable you reserve some space in memory

In R, the variables are not declared as some data type but are assigned with R-Objects and the data type of the R-object becomes the data type of the variable.

The most used R objects are:
   1. Vectors
   2. Lists
   3. Matrices
   4. Factors
   5. Data frames
   6. Arrays
   
# Vectors
A vector is an R object that can contain elements of different classes/data types.
Data types/ classes that are accepted in vectors are:
  1. Integer
  2. Numeric
  3. Logical
  4. Character
  5. Complex
  6. Raw
  
  
# Creating a vecto
To create a vector in R, we use the c() function which means combine elements to a vector.
```{r}
# a vector of integers
x <- c(23, 5,6,78,45,8)
x
```

```{r}
# a vector of numeric/ double
v = c(2.3,4.5,5.1,6.8)
v
```

```{r}
# a vector of characters
char <- c("A","B","C","D","F")
char
```
```{R}
# vector of logical values
l <- c(FALSE, FALSE, TRUE, FALSE)
l
```
```{r}
# a vector of complex numbers
c <- c(5+3i, 3+2i, 4-2i)
c
```
```{r}
# a vector of raws
charToRaw("R proramming")
```
# Matrices
A matrix is a collection of data elements arranged in a 2-dimensional rectangular layout.
Matrices contain elements of the same atomic type.

# creating a matrix
To create a matrix we use the matrix() function which accept 5 arguments i.e data, number of rows, number of columns, byrow, and dimension names.

The byrow argument takes logical value; if is set to FALSE (default) the matrix filled by columns, otherwise the matrix is filled by rows.

# example
```{r}
mat1 <- matrix(c(3,7,8,3,2,5), nrow = 2, ncol = 3, 
               byrow = FALSE, dimnames = list(c("row1","row2"),
                                              c("c1","c2","c3")))
mat1
```
```{r}
mat2 <- matrix(c(6,3,8,3,5,5), nrow = 2, ncol = 3, 
               byrow = TRUE, dimnames = list(c("row1","row2"),
                                              c("c1","c2","c3")))
mat2
```
# we can perform matrix mathematical operations using
```{r}
# add matrices
mat1+mat2

#subtraction
mat1 - mat2
```
# Factors
R factor is a measure of how well the refined structure predicts the observed data.

They can store both strings and integers as well as useful in the columns which have limited number of unique values.
E.g "MALE","FEMALE".

# Creating a factor
To create a factor, we use the factor() function with the data as its argument.
```{r}
# a factor of marital status
status <- factor(c("married","divorced","single","single",
                   "married","married"))
status
```
# To check the levels of status(unique values), we use levels() funtion
```{r}
levels(status)
```

# Data frame
A data frame is a table or a 2-D array-like structure in which each column contains values of one variable and each row contains one set of values from each column.

# Characteristics of a data frame
  1. The column names should be non-empty.
  2. The row names should be unique.
  3. Each column should contain same number of data items.
  
# Creating a data frame
A data frame is created using the data.frame() function.
```{r}
# creating a data frame
df <- data.frame(ID = c(1:5), name = c("Ali","Abdul","Rick","Zahrah","Gracy"), age =c(22,19,21,23,25))
df
```
# add a new colum
```{r}
# add column height 
df$height <- c(180,176,158,168,177)
df
```
# summary of the data frame
```{r}
summary(df)
```
# structure of the data frame
```{r}
str(df)
```
# Extract the names only
```{r}
df$name
```
# Extract names with id greater than 3
```{r}
df$name[df$ID > 3]
```
# Extract names and height only
```{r}
data.frame(df$name, df$height)
```
# Extract the first 2 rows and all columns
```{r}
df[1:2,]
```

# Extract the 3rd and 5th row with 2nd and 4th column
```{r}
df[c(3,5),c(2,4)]
```




